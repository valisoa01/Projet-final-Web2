generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "windows"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id         Int          @id @default(autoincrement())
  username   String       @unique
  email      String       @unique
  password   String
  profile    String? // Optional field for profile image path
  createdAt  DateTime     @default(now())
  Categories Categories[]
  Expenses   Expenses[]
  Incomes    Incomes[]
}

model Categories {
  id        Int        @id @default(autoincrement())
  name      String?    @db.VarChar(255)
  budget    Decimal?   @db.Decimal
  createdAt DateTime   @db.Timestamptz(6)
  updatedAt DateTime   @db.Timestamptz(6)
  UserId    Int?
  Users     Users?     @relation(fields: [UserId], references: [id])
  Expenses  Expenses[]
}

model Expenses {
  id          Int        @id @default(autoincrement())
  amount      Decimal    @db.Decimal
  date        DateTime   @db.Timestamptz(6)
  description String     @db.VarChar(255)
  type        String?    @db.VarChar(255) // one-time or recurring
  receipt     String?    @db.VarChar(255) // URL du receipt uploadé
  categoryId  Int
  userId      Int
  recurring   Boolean    @default(false) // Nouveau : si récurrente
  frequency   String?    @db.VarChar(50) // Nouveau : weekly, monthly, etc.
  createdAt   DateTime   @db.Timestamptz(6)
  updatedAt   DateTime   @db.Timestamptz(6)
  Categories  Categories @relation(fields: [categoryId], references: [id])
  Users       Users      @relation(fields: [userId], references: [id])
}

model Incomes {
  id          Int       @id @default(autoincrement())
  amount      Decimal?  @db.Decimal
  date        DateTime? @db.Timestamptz(6)
  description String?   @db.VarChar(255)
  type        String?   @db.VarChar(255)
  userId      Int?
  createdAt   DateTime  @db.Timestamptz(6)
  updatedAt   DateTime  @db.Timestamptz(6)
  UserId      Int?
  Users       Users?    @relation(fields: [UserId], references: [id])
}
