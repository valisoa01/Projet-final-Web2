 import React, { useState, useEffect } from 'react';
import axios from 'axios';

const ContentIncomes = () => {
  const [isFormOpen, setIsFormOpen] = useState(false);
  const [isOtherType, setIsOtherType] = useState(false); // Pour le type "Other"
  const [formData, setFormData] = useState({
    amount: '',
    date: '',
    type: '',
    description: '',
  });
  const [incomes, setIncomes] = useState([]);
  const [editingIncomeId, setEditingIncomeId] = useState(null);

  const [filters, setFilters] = useState({
    month: '',
    year: '',
    type: '',
    minAmount: '',
    maxAmount: '',
  });

  const [sortConfig, setSortConfig] = useState({
    key: 'createdAt',
    direction: 'ascending',
  });

  const incomesColumns = [
    { name: 'Id', key: 'id' },
    { name: 'Amount', key: 'amount' },
    { name: 'Date', key: 'date' },
    { name: 'Type', key: 'type' },
    { name: 'Description', key: 'description', optional: true },
    { name: 'Creation Date', key: 'createdAt', autoGenerated: true },
    { name: '', key: 'actions', isAction: true },
  ];

  // Fetch incomes from backend
  useEffect(() => {
    fetchIncomes();
  }, []);

  const fetchIncomes = async () => {
    const token = localStorage.getItem('token');
    if (!token) return;
    try {
      const response = await axios.get('http://localhost:5000/api/incomes', {
        headers: { Authorization: `Bearer ${token}` },
      });
      setIncomes(response.data);
    } catch (error) {
      console.error('Error fetching incomes:', error.response?.data || error);
    }
  };

  const handleChange = (e) => {
    setFormData({ ...formData, [e.target.name]: e.target.value });
  };

  const handleFilterChange = (e) => {
    const { name, value } = e.target;
    setFilters((prev) => ({ ...prev, [name]: value }));
  };

  const requestSort = (key) => {
    setSortConfig((prev) => ({
      key,
      direction: prev.key === key && prev.direction === 'ascending' ? 'descending' : 'ascending',
    }));
  };

  const handleEdit = (income) => {
    setFormData({
      amount: income.amount,
      date: income.date.split('T')[0],
      type: income.type || '',
      description: income.description || '',
    });
    setEditingIncomeId(income.id);
    setIsFormOpen(true);
    setIsOtherType(false);
  };

  const handleDelete = async (id) => {
    const token = localStorage.getItem('token');
    if (!token) return;
    if (!window.confirm('Do you really want to delete this income?')) return;

    try {
      await axios.delete(`http://localhost:5000/api/incomes/${id}/delete`, {
        headers: { Authorization: `Bearer ${token}` },
      });
      setIncomes((prev) => prev.filter((i) => i.id !== id));
    } catch (error) {
      console.error('Delete error:', error.response?.data || error);
      alert(`Error: ${error.response?.data?.message || error.message}`);
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    const token = localStorage.getItem('token');
    if (!token) {
      alert('You must be logged in to add or edit income');
      return;
    }

    try {
      if (editingIncomeId) {
        await axios.put(
          `http://localhost:5000/api/incomes/${editingIncomeId}/edit`,
          {
            amount: parseFloat(formData.amount),
            date: formData.date,
            type: formData.type,
            description: formData.description,
          },
          { headers: { Authorization: `Bearer ${token}` } }
        );
        setEditingIncomeId(null);
      } else {
        await axios.post(
          'http://localhost:5000/api/incomes/new',
          {
            amount: parseFloat(formData.amount),
            date: formData.date,
            type: formData.type,
            description: formData.description,
          },
          { headers: { Authorization: `Bearer ${token}` } }
        );
      }
      setFormData({ amount: '', date: '', type: '', description: '' });
      setIsOtherType(false);
      setIsFormOpen(false);
      fetchIncomes();
    } catch (error) {
      console.error('Error:', error.response?.data || error);
      alert(`Error: ${error.response?.data?.message || error.message}`);
    }
  };

  const uniqueTypes = [...new Set(incomes.map((i) => i.type).filter(Boolean))];

  const filteredIncomes = incomes
    .filter((income) => {
      const dateObj = new Date(income.date);
      const incomeYear = dateObj.getFullYear();
      const incomeMonth = dateObj.getMonth() + 1;

      if (filters.year && filters.month) {
        return incomeYear === parseInt(filters.year) && incomeMonth === parseInt(filters.month);
      }
      if (filters.year) return incomeYear === parseInt(filters.year);
      if (filters.month) return incomeMonth === parseInt(filters.month);
      return true;
    })
    .filter((income) => (filters.type ? income.type === filters.type : true))
    .filter((income) => {
      const amount = parseFloat(income.amount || 0);
      if (filters.minAmount && amount < parseFloat(filters.minAmount)) return false;
      if (filters.maxAmount && amount > parseFloat(filters.maxAmount)) return false;
      return true;
    })
    .sort((a, b) => {
      let aValue = a[sortConfig.key];
      let bValue = b[sortConfig.key];
      if (sortConfig.key === 'createdAt' || sortConfig.key === 'date') {
        aValue = new Date(aValue);
        bValue = new Date(bValue);
      }
      if (aValue < bValue) return sortConfig.direction === 'ascending' ? -1 : 1;
      if (aValue > bValue) return sortConfig.direction === 'ascending' ? 1 : -1;
      return 0;
    });

  const totalAmount = filteredIncomes.reduce((sum, income) => sum + parseFloat(income.amount || 0), 0);
  const incomeCount = filteredIncomes.length;
  const latestDate = filteredIncomes.length > 0 ? filteredIncomes[filteredIncomes.length - 1].createdAt?.split('T')[0] : 'N/A';

  return (
    <div className="w-full min-h-screen bg-gray-50 flex flex-col items-center p-4 sm:p-6">
      <h1 className="text-3xl md:text-4xl font-extrabold mb-8 text-gray-900">Income Dashboard</h1>

      {/* Filters */}
      <div className="w-full bg-white rounded-2xl p-6 mb-6 shadow-lg grid grid-cols-1 sm:grid-cols-5 gap-6">
        <div>
          <label>Month</label>
          <select name="month" value={filters.month} onChange={handleFilterChange} className="w-full border rounded-lg p-2">
            <option value="">All</option>
            {Array.from({ length: 12 }, (_, i) => i + 1).map((m) => (
              <option key={m} value={m}>{new Date(0, m - 1).toLocaleString('default', { month: 'long' })}</option>
            ))}
          </select>
        </div>
        <div>
          <label>Year</label>
          <select name="year" value={filters.year} onChange={handleFilterChange} className="w-full border rounded-lg p-2">
            <option value="">All</option>
            {Array.from({ length: 5 }, (_, i) => new Date().getFullYear() - i).map((y) => (
              <option key={y} value={y}>{y}</option>
            ))}
          </select>
        </div>
        <div>
          <label>Type</label>
          <select name="type" value={filters.type} onChange={handleFilterChange} className="w-full border rounded-lg p-2">
            <option value="">All</option>
            {uniqueTypes.map((type) => <option key={type} value={type}>{type}</option>)}
          </select>
        </div>
        <div>
          <label>Min Amount</label>
          <input type="number" name="minAmount" value={filters.minAmount} onChange={handleFilterChange} className="w-full border rounded-lg p-2" placeholder="Min" />
        </div>
        <div>
          <label>Max Amount</label>
          <input type="number" name="maxAmount" value={filters.maxAmount} onChange={handleFilterChange} className="w-full border rounded-lg p-2" placeholder="Max" />
        </div>
      </div>

      {/* Summary */}
      <div className="w-full grid grid-cols-1 sm:grid-cols-3 gap-6 mb-8">
        <div className="bg-blue-600 text-white rounded-xl p-6 text-center">Total Income: {totalAmount.toFixed(2)} Ar</div>
        <div className="bg-green-600 text-white rounded-xl p-6 text-center">Count: {incomeCount}</div>
        <div className="bg-purple-600 text-white rounded-xl p-6 text-center">Latest: {latestDate}</div>
      </div>

      {/* Table */}
      <table className="w-full bg-white rounded-2xl shadow-xl table-auto border-collapse">
        <thead className="bg-blue-600 text-white">
          <tr>
            {incomesColumns.map((col) => (
              <th key={col.key} className="p-4 cursor-pointer" onClick={() => col.key && requestSort(col.key)}>
                {col.name} {sortConfig.key === col.key ? (sortConfig.direction === 'ascending' ? '↑' : '↓') : ''}
              </th>
            ))}
          </tr>
        </thead>
        <tbody>
          {filteredIncomes.map((income, index) => (
            <tr key={income.id} className="hover:bg-indigo-50 transition-all">
              <td className="p-4 text-center">{index + 1}</td>
              <td className="p-4 text-center">{income.amount} Ar</td>
              <td className="p-4 text-center">{income.date?.split('T')[0]}</td>
              <td className="p-4 text-center">{income.type}</td>
              <td className="p-4 text-center">{income.description}</td>
              <td className="p-4 text-center">{income.createdAt?.split('T')[0]}</td>
              <td className="p-4 text-center flex justify-center gap-2">
                <button className="bg-yellow-400 px-3 py-1 rounded" onClick={() => handleEdit(income)}>Edit</button>
                <button className="bg-red-500 px-3 py-1 rounded" onClick={() => handleDelete(income.id)}>Delete</button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>

      {/* Add/Edit Form */}
      <button
        className="mt-6 bg-blue-600 text-white px-6 py-3 rounded-xl"
        onClick={() => { setIsFormOpen(!isFormOpen); setEditingIncomeId(null); setIsOtherType(false); }}
      >
        {editingIncomeId ? 'Edit Income' : 'Add Income'}
      </button>

      {isFormOpen && (
        <div className="fixed inset-0 bg-black bg-opacity-30 flex items-center justify-center z-50">
          <div className="bg-white rounded-xl p-8 w-full max-w-lg">
            <h2 className="text-2xl font-bold mb-4">{editingIncomeId ? 'Edit Income' : 'Add Income'}</h2>
            <form onSubmit={handleSubmit} className="flex flex-col gap-4">
              <input type="number" name="amount" placeholder="Amount" value={formData.amount} onChange={handleChange} className="border rounded-lg p-2" required />
              <input type="date" name="date" value={formData.date} onChange={handleChange} className="border rounded-lg p-2" required />

              {/* Type avec option Other */}
              <div>
                <label>Type</label>
                {!isOtherType ? (
                  <select
                    name="type"
                    value={formData.type}
                    onChange={(e) => {
                      if (e.target.value === 'Other') {
                        setIsOtherType(true);
                        setFormData({ ...formData, type: '' });
                      } else {
                        setFormData({ ...formData, type: e.target.value });
                      }
                    }}
                    className="w-full border rounded-lg p-2"
                    required
                  >
                    <option value="">Select type</option>
                    {uniqueTypes.map((type) => (
                      <option key={type} value={type}>{type}</option>
                    ))}
                    <option value="Other">Other</option>
                  </select>
                ) : (
                  <input
                    type="text"
                    name="type"
                    value={formData.type}
                    onChange={(e) => setFormData({ ...formData, type: e.target.value })}
                    placeholder="Enter new type"
                    className="w-full border rounded-lg p-2"
                    required
                  />
                )}
                {isOtherType && (
                  <button
                    type="button"
                    className="text-sm text-blue-500 mt-1"
                    onClick={() => setIsOtherType(false)}
                  >
                    Choose from existing types
                  </button>
                )}
              </div>

              <input type="text" name="description" placeholder="Description" value={formData.description} onChange={handleChange} className="border rounded-lg p-2" />

              <div className="flex justify-end gap-2 mt-2">
                <button type="button" className="px-4 py-2 bg-gray-400 rounded" onClick={() => setIsFormOpen(false)}>Cancel</button>
                <button type="submit" className="px-4 py-2 bg-blue-600 text-white rounded">{editingIncomeId ? 'Save' : 'Add'}</button>
              </div>
            </form>
          </div>
        </div>
      )}
    </div>
  );
};

export default ContentIncomes;
