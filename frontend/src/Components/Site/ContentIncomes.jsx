 import React, { useState, useEffect } from 'react';
import axios from 'axios';

const ContentIncomes = () => {
  const [isFormOpen, setIsFormOpen] = useState(false);
  const [formData, setFormData] = useState({
    amount: '',
    date: '',
    type: '',
    description: '',
  });
  const [incomes, setIncomes] = useState([]);
  const [editingIncomeId, setEditingIncomeId] = useState(null);

  const incomesColumns = [
    { name: 'Id' },
    { name: 'Amount' },
    { name: 'Date' },
    { name: 'Type' },
    { name: 'Description', optional: true },
    { name: 'Creation Date', autoGenerated: true },
    { name: '', isAction: true },
  ];

  useEffect(() => {
    fetchIncomes();
  }, []);

  const fetchIncomes = async () => {
    const token = localStorage.getItem('token');
    if (!token) return;

    try {
      const response = await axios.get('http://localhost:5000/api/incomes', {
        headers: { Authorization: `Bearer ${token}` },
      });
      // Sort incomes by createdAt to maintain consistent order
      const sortedIncomes = response.data.sort((a, b) => new Date(a.createdAt) - new Date(b.createdAt));
      setIncomes(sortedIncomes);
    } catch (error) {
      console.error('Erreur lors du fetch des revenus:', error.response?.data || error);
    }
  };

  const handleChange = (e) => {
    setFormData({ ...formData, [e.target.name]: e.target.value });
  };

  const handleEdit = (income) => {
    setFormData({
      amount: income.amount,
      date: income.date.split('T')[0],
      type: income.type || '',
      description: income.description || '',
    });
    setEditingIncomeId(income.id);
    setIsFormOpen(true);
  };

  const handleDelete = async (id) => {
    const token = localStorage.getItem('token');
    if (!token) return;
    if (!window.confirm('Voulez-vous vraiment supprimer ce revenu ?')) return;

    try {
      await axios.delete(`http://localhost:5000/api/incomes/${id}/delete`, {
        headers: { Authorization: `Bearer ${token}` },
      });
      setIncomes((prev) => prev.filter((i) => i.id !== id));
    } catch (error) {
      console.error('Erreur suppression:', error.response?.data || error);
      alert(`Erreur: ${error.response?.data?.message || error.message}`);
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    const token = localStorage.getItem('token');
    if (!token) {
      alert('Vous devez être connecté pour ajouter ou modifier un revenu');
      return;
    }

    try {
      if (editingIncomeId) {
        await axios.put(
          `http://localhost:5000/api/incomes/${editingIncomeId}/edit`,
          {
            amount: parseFloat(formData.amount),
            date: formData.date,
            type: formData.type,
            description: formData.description,
          },
          { headers: { Authorization: `Bearer ${token}` } }
        );

        setIncomes((prev) => {
          const index = prev.findIndex((i) => i.id === editingIncomeId);
          if (index === -1) return prev;
          const updated = [...prev];
          updated[index] = {
            ...updated[index],
            amount: parseFloat(formData.amount),
            date: formData.date,
            type: formData.type,
            description: formData.description,
          };
          // Sort by createdAt to maintain order
          return updated.sort((a, b) => new Date(a.createdAt) - new Date(b.createdAt));
        });

        setEditingIncomeId(null);
      } else {
        const response = await axios.post(
          'http://localhost:5000/api/incomes/new',
          {
            amount: parseFloat(formData.amount),
            date: formData.date,
            type: formData.type,
            description: formData.description,
          },
          { headers: { Authorization: `Bearer ${token}` } }
        );
        setIncomes((prev) => {
          const updated = [...prev, response.data];
          // Sort by createdAt to maintain order
          return updated.sort((a, b) => new Date(a.createdAt) - new Date(b.createdAt));
        });
      }

      setIsFormOpen(false);
      setFormData({ amount: '', date: '', type: '', description: '' });
    } catch (error) {
      console.error('Erreur:', error.response?.data || error);
      alert(`Erreur: ${error.response?.data?.message || error.message}`);
    }
  };

  return (
    <div className="w-full mt-6 flex flex-col items-center p-4">
      <h1 className="text-2xl md:text-3xl font-bold mb-6 text-gray-800">
        Income Tracking Table
      </h1>

      <div className="w-full md:w-4/5 overflow-auto shadow-lg rounded-lg border border-gray-300">
        <table className="w-full table-auto border-collapse">
          <thead className="bg-gray-200">
            <tr>
              {incomesColumns.map((col, index) => (
                <th
                  key={index}
                  className="p-3 border-b border-gray-300 text-center font-semibold text-sm"
                >
                  {col.name}
                  {col.optional && <span className="text-xs text-gray-500 ml-1">(optional)</span>}
                  {col.autoGenerated && <span className="text-xs text-gray-500 ml-1">(auto)</span>}
                </th>
              ))}
            </tr>
          </thead>
          <tbody className="bg-white">
            {incomes.map((income, index) => (
              <tr key={income.id} className="hover:bg-gray-50">
                <td className="p-3 border-b border-gray-300 text-center">{index + 1}</td>
                <td className="p-3 border-b border-gray-300 text-center">${income.amount}</td>
                <td className="p-3 border-b border-gray-300 text-center">{income.date?.split('T')[0]}</td>
                <td className="p-3 border-b border-gray-300 text-center">{income.type}</td>
                <td className="p-3 border-b border-gray-300 text-center">{income.description}</td>
                <td className="p-3 border-b border-gray-300 text-center">{income.createdAt?.split('T')[0]}</td>
                <td className="p-3 border-b border-gray-300 text-center flex justify-center gap-2">
                  <button
                    onClick={() => handleEdit(income)}
                    className="bg-yellow-500 hover:bg-yellow-600 text-white px-3 py-1 rounded"
                  >
                    Modifier
                  </button>
                  <button
                    onClick={() => handleDelete(income.id)}
                    className="bg-red-500 hover:bg-red-600 text-white px-3 py-1 rounded"
                  >
                    Supprimer
                  </button>
                </td>
              </tr>
            ))}
            <tr>
              <td colSpan={7} className="p-4 text-center relative">
                <button
                  onClick={() => {
                    setIsFormOpen(!isFormOpen);
                    setEditingIncomeId(null);
                  }}
                  className="bg-blue-500 hover:bg-blue-600 text-white font-semibold py-2 px-6 rounded-full shadow-md flex items-center justify-center gap-2 transition-all mx-auto"
                >
                  <span className="text-xl font-bold">+</span>
                  <span>{editingIncomeId ? 'Edit Income' : 'Add Income'}</span>
                </button>

                {isFormOpen && (
                  <div className="fixed inset-0 bg-opacity-50 flex items-center justify-center z-50">
                    <div className="bg-white rounded-lg p-6 w-full max-w-md mx-4">
                      <h2 className="text-lg font-bold mb-4">
                        {editingIncomeId ? 'Edit Income' : 'Add Income'}
                      </h2>
                      <form onSubmit={handleSubmit} className="flex flex-col gap-3">
                        <input
                          type="number"
                          name="amount"
                          placeholder="Amount"
                          value={formData.amount}
                          onChange={handleChange}
                          className="border p-2 rounded"
                          required
                          step="0.01"
                          min="0"
                        />
                        <input
                          type="date"
                          name="date"
                          value={formData.date}
                          onChange={handleChange}
                          className="border p-2 rounded"
                          required
                        />
                        <input
                          type="text"
                          name="type"
                          placeholder="Type"
                          value={formData.type}
                          onChange={handleChange}
                          className="border p-2 rounded"
                          required
                        />
                        <input
                          type="text"
                          name="description"
                          placeholder="Description (optional)"
                          value={formData.description}
                          onChange={handleChange}
                          className="border p-2 rounded"
                        />
                        <div className="flex justify-end gap-2 mt-3">
                          <button
                            type="button"
                            onClick={() => {
                              setIsFormOpen(false);
                              setEditingIncomeId(null);
                            }}
                            className="bg-gray-300 hover:bg-gray-400 text-black px-4 py-2 rounded"
                          >
                            Cancel
                          </button>
                          <button
                            type="submit"
                            className="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded"
                          >
                            {editingIncomeId ? 'Update' : 'Save'}
                          </button>
                        </div>
                      </form>
                    </div>
                  </div>
                )}
              </td>
            </tr>
          </tbody>
        </table>
      </div>
    </div>
  );
};

export default ContentIncomes;