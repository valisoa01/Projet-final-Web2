 import React, { useState, useEffect } from 'react';
import axios from 'axios';

const ContentIncomes = () => {
  const [isFormOpen, setIsFormOpen] = useState(false);
  const [formData, setFormData] = useState({
    amount: '',
    date: '',
    type: '',
    description: '',
  });
  const [incomes, setIncomes] = useState([]);
  const [editingIncomeId, setEditingIncomeId] = useState(null);

  const incomesColumns = [
    { name: 'Id' },
    { name: 'Amount' },
    { name: 'Date' },
    { name: 'Type' },
    { name: 'Description', optional: true },
    { name: 'Creation Date', autoGenerated: true },
    { name: '', isAction: true },
  ];

  useEffect(() => {
    fetchIncomes();
  }, []);

  const fetchIncomes = async () => {
    const token = localStorage.getItem('token');
    if (!token) return;

    try {
      const response = await axios.get('http://localhost:5000/api/incomes', {
        headers: { Authorization: `Bearer ${token}` },
      });
      const sortedIncomes = response.data.sort(
        (a, b) => new Date(a.createdAt) - new Date(b.createdAt)
      );
      setIncomes(sortedIncomes);
    } catch (error) {
      console.error('Erreur lors du fetch des revenus:', error.response?.data || error);
    }
  };

  const handleChange = (e) => {
    setFormData({ ...formData, [e.target.name]: e.target.value });
  };

  const handleEdit = (income) => {
    setFormData({
      amount: income.amount,
      date: income.date.split('T')[0],
      type: income.type || '',
      description: income.description || '',
    });
    setEditingIncomeId(income.id);
    setIsFormOpen(true);
  };

  const handleDelete = async (id) => {
    const token = localStorage.getItem('token');
    if (!token) return;
    if (!window.confirm('Voulez-vous vraiment supprimer ce revenu ?')) return;

    try {
      await axios.delete(`http://localhost:5000/api/incomes/${id}/delete`, {
        headers: { Authorization: `Bearer ${token}` },
      });
      setIncomes((prev) => prev.filter((i) => i.id !== id));
    } catch (error) {
      console.error('Erreur suppression:', error.response?.data || error);
      alert(`Erreur: ${error.response?.data?.message || error.message}`);
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    const token = localStorage.getItem('token');
    if (!token) {
      alert('Vous devez être connecté pour ajouter ou modifier un revenu');
      return;
    }

    try {
      if (editingIncomeId) {
        await axios.put(
          `http://localhost:5000/api/incomes/${editingIncomeId}/edit`,
          {
            amount: parseFloat(formData.amount),
            date: formData.date,
            type: formData.type,
            description: formData.description,
          },
          { headers: { Authorization: `Bearer ${token}` } }
        );

        setIncomes((prev) => {
          const index = prev.findIndex((i) => i.id === editingIncomeId);
          if (index === -1) return prev;
          const updated = [...prev];
          updated[index] = {
            ...updated[index],
            amount: parseFloat(formData.amount),
            date: formData.date,
            type: formData.type,
            description: formData.description,
          };
          return updated.sort((a, b) => new Date(a.createdAt) - new Date(b.createdAt));
        });

        setEditingIncomeId(null);
      } else {
        const response = await axios.post(
          'http://localhost:5000/api/incomes/new',
          {
            amount: parseFloat(formData.amount),
            date: formData.date,
            type: formData.type,
            description: formData.description,
          },
          { headers: { Authorization: `Bearer ${token}` } }
        );
        setIncomes((prev) => {
          const updated = [...prev, response.data];
          return updated.sort((a, b) => new Date(a.createdAt) - new Date(b.createdAt));
        });
      }

      setIsFormOpen(false);
      setFormData({ amount: '', date: '', type: '', description: '' });
    } catch (error) {
      console.error('Erreur:', error.response?.data || error);
      alert(`Erreur: ${error.response?.data?.message || error.message}`);
    }
  };

  // Calculate total amount
  const totalAmount = incomes.reduce((sum, income) => sum + parseFloat(income.amount || 0), 0);
  // Calculate number of incomes
  const incomeCount = incomes.length;
  // Get latest income date
  const latestDate = incomes.length > 0 ? incomes[incomes.length - 1].createdAt?.split('T')[0] : 'N/A';

  return (
    <div className="w-full min-h-screen bg-gradient-to-b from-gray-50 to-gray-100 flex flex-col items-center p-4 sm:p-6">
      <h1 className="text-3xl md:text-4xl font-extrabold mb-8 text-gray-900 dark:text-white tracking-wide drop-shadow-md">
        Income Tracking Dashboard
      </h1>

      {/* Cards Section */}
      <div className="w-full grid grid-cols-1 sm:grid-cols-3 gap-4 mb-6">
        {/* Card 1: Total Income */}
        <div className="bg-gradient-to-r from-blue-600 to-indigo-600 text-white rounded-xl p-3 shadow-lg h-32 sm:h-40 flex items-center justify-center transform hover:scale-105 transition-all duration-300">
          <div className="text-center">
            <h3 className="text-sm font-semibold">Total Income</h3>
            <p className="text-xl sm:text-2xl font-bold mt-1">{totalAmount.toFixed(2)} Ar</p>
          </div>
        </div>

        {/* Card 2: Number of Incomes */}
        <div className="bg-gradient-to-r from-green-600 to-teal-600 text-white rounded-xl p-3 shadow-lg h-32 sm:h-40 flex items-center justify-center transform hover:scale-105 transition-all duration-300">
          <div className="text-center">
            <h3 className="text-sm font-semibold">Income Count</h3>
            <p className="text-xl sm:text-2xl font-bold mt-1">{incomeCount}</p>
          </div>
        </div>

        {/* Card 3: Latest Income Date */}
        <div className="bg-gradient-to-r from-purple-600 to-pink-600 text-white rounded-xl p-3 shadow-lg h-32 sm:h-40 flex items-center justify-center transform hover:scale-105 transition-all duration-300">
          <div className="text-center">
            <h3 className="text-sm font-semibold">Latest Income</h3>
            <p className="text-xl sm:text-2xl font-bold mt-1">{latestDate}</p>
          </div>
        </div>
      </div>

      {/* Table Section */}
      <div className="w-full bg-white rounded-2xl shadow-xl">
        <table className="w-full table-auto border-collapse">
          <thead className="bg-gradient-to-r from-blue-600 to-indigo-600 text-white">
            <tr>
              {incomesColumns.map((col, index) => (
                <th
                  key={index}
                  className="p-4 text-center font-semibold text-sm md:text-base"
                >
                  {col.name}
                  {col.optional && <span className="text-xs ml-1 font-normal">(optional)</span>}
                  {col.autoGenerated && <span className="text-xs ml-1 font-normal">(auto)</span>}
                </th>
              ))}
            </tr>
          </thead>
          <tbody>
            {incomes.map((income, index) => (
              <tr
                key={income.id}
                className="transition-all duration-300 hover:bg-indigo-50 hover:scale-[1.02] cursor-pointer"
              >
                <td className="p-4 border-b border-gray-200 text-center font-medium">{index + 1}</td>
                <td className="p-4 border-b border-gray-200 text-center font-medium">{income.amount} Ar</td>
                <td className="p-4 border-b border-gray-200 text-center">{income.date?.split('T')[0]}</td>
                <td className="p-4 border-b border-gray-200 text-center">{income.type}</td>
                <td className="p-4 border-b border-gray-200 text-center">{income.description}</td>
                <td className="p-4 border-b border-gray-200 text-center">{income.createdAt?.split('T')[0]}</td>
                <td className="p-4 border-b border-gray-200 text-center flex justify-center gap-3">
                  <button
                    onClick={() => handleEdit(income)}
                    className="bg-yellow-400 hover:bg-yellow-500 text-white font-semibold px-4 py-2 rounded-lg shadow-md transition-all"
                  >
                    Modify
                  </button>
                  <button
                    onClick={() => handleDelete(income.id)}
                    className="bg-red-500 hover:bg-red-600 text-white font-semibold px-4 py-2 rounded-lg shadow-md transition-all"
                  >
                    Delete
                  </button>
                </td>
              </tr>
            ))}
            {/* Total row */}
            <tr className="bg-gray-100 font-bold">
              <td className="p-4 border-b border-gray-200 text-center">Total</td>
              <td className="p-4 border-b border-gray-200 text-center font-medium">{totalAmount.toFixed(2)} Ar</td>
              <td className="p-4 border-b border-gray-200 text-center"></td>
              <td className="p-4 border-b border-gray-200 text-center"></td>
              <td className="p-4 border-b border-gray-200 text-center"></td>
              <td className="p-4 border-b border-gray-200 text-center"></td>
              <td className="p-4 border-b border-gray-200 text-center"></td>
            </tr>
            <tr>
              <td colSpan={7} className="p-6 text-center">
                <button
                  onClick={() => { setIsFormOpen(!isFormOpen); setEditingIncomeId(null); }}
                  className="bg-blue-600 hover:scale-105 transition-all text-white font-bold py-3 px-8 rounded-full shadow-2xl flex items-center justify-center gap-3 mx-auto"
                >
                  <span className="text-2xl font-extrabold">+</span>
                  <span>{editingIncomeId ? 'Edit Income' : 'Add Income'}</span>
                </button>

                {isFormOpen && (
                  <div className="fixed inset-0 bg-black bg-opacity-30 flex items-center justify-center z-50">
                    <div className="bg-white rounded-2xl p-8 w-full max-w-lg mx-4 shadow-2xl">
                      <h2 className="text-2xl font-extrabold mb-6 text-gray-800">
                        {editingIncomeId ? 'Edit Income' : 'Add Income'}
                      </h2>
                      <form onSubmit={handleSubmit} className="flex flex-col gap-4">
                        <input
                          type="number"
                          name="amount"
                          placeholder="Amount"
                          value={formData.amount}
                          onChange={handleChange}
                          className="border border-gray-300 rounded-lg p-3 focus:ring-2 focus:ring-indigo-500 focus:outline-none shadow-sm"
                          required
                          step="0.01"
                          min="0"
                        />
                        <input
                          type="date"
                          name="date"
                          value={formData.date}
                          onChange={handleChange}
                          className="border border-gray-300 rounded-lg p-3 focus:ring-2 focus:ring-indigo-500 focus:outline-none shadow-sm"
                          required
                        />
                        <input
                          type="text"
                          name="type"
                          placeholder="Type"
                          value={formData.type}
                          onChange={handleChange}
                          className="border border-gray-300 rounded-lg p-3 focus:ring-2 focus:ring-indigo-500 focus:outline-none shadow-sm"
                          required
                        />
                        <input
                          type="text"
                          name="description"
                          placeholder="Description (optional)"
                          value={formData.description}
                          onChange={handleChange}
                          className="border border-gray-300 rounded-lg p-3 focus:ring-2 focus:ring-indigo-500 focus:outline-none shadow-sm"
                        />
                        <div className="flex justify-end gap-3 mt-4">
                          <button
                            type="button"
                            onClick={() => { setIsFormOpen(false); setEditingIncomeId(null); }}
                            className="bg-gray-300 hover:bg-gray-400 text-gray-800 font-semibold py-2 px-6 rounded-lg shadow-sm transition-all"
                          >
                            Cancel
                          </button>
                          <button
                            type="submit"
                            className="bg-gradient-to-r from-indigo-500 via-purple-500 to-pink-500 text-white font-bold py-2 px-6 rounded-lg shadow-lg hover:scale-105 transition-all"
                          >
                            {editingIncomeId ? 'Update' : 'Save'}
                          </button>
                        </div>
                      </form>
                    </div>
                  </div>
                )}
              </td>
            </tr>
          </tbody>
        </table>
      </div>
    </div>
  );
};

export default ContentIncomes;